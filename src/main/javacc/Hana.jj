/*
 *  Hana.jj
 *
 *  Hana specification for JavaCC.
 */

// ---------------------------------------------------------------------------
// GLOBAL OPTIONS
// ---------------------------------------------------------------------------

options {
  UNICODE_INPUT = true;
  STATIC = false;
}

// ---------------------------------------------------------------------------
// THE PARSER CLASS
// ---------------------------------------------------------------------------

PARSER_BEGIN(Parser)
/*
* When you run `javacc` on this file, make you run from a pwd with children directory 
* like that in the package statement below.
* And pipe the output files to a file matching the package below.
*/

package edu.lmu.cs.xlg.hana.syntax;

import java.lang.Thread;
import java.util.List;
import java.util.ArrayList;
import java.io.Reader;
import edu.lmu.cs.xlg.util.Log;
import edu.lmu.cs.xlg.hana.entities.*;

public class Parser {
    public Program parse(Reader reader, Log log) {
        try {
            return parseProgram();
        } catch (TokenMgrError e) {
            log.exception(e);
            return null;
        } catch (ParseException e) {
            log.exception(e);
            return null;
        }
    }
}

PARSER_END(Parser)

// ---------------------------------------------------------------------------
// LEXICAL ANALYZER
// ---------------------------------------------------------------------------

// Whitespace and comments

SKIP: {
    " " | "\t" | "\n" | "\r" | <"//" (~["\n","\r"])* ("\n"|"\r")>
}

// Reserved Words and symbols

TOKEN: {

   "boolean"  |  "int"     |  "char"    |  "real"   |  "string"
|  "stream"   |  "thread"  |  "struct"  |  "enum"   |  "void"
|  "const"    |  "volatile"|  "null"    |  "true"   |  "false"
|  "if"       |  "else"    |  "for"     |  "while"  |  "unless" |  "until"
|  "break"    |  "continue"|  "return"  |  "start"  |  "die"    |  "new"  | "print"

|  "."   |   ","    |   "..." |  ";"    |  "::"  
|  "("   |   ")"    |  "["    |  "]"    |  "{"   |  "}"
|  "="
|  "=="  |   "!="   |  "<"    |  "<="   |  ">"   |  ">="
|  "?"   |   ":"    |  "||"   |  "&&"   |  "!"
|  "+"   |   "-"    |  "*"    |  "/"    |  "%"
|  "|"   |   "^"    |  "&"    |  "~"    |  "<<"  |  ">>"
|  "++"  |   "--"
|  "#"   |   "$"
}

// Literals

TOKEN: {
    < INTLIT: (["0"-"9"])+ >
|
    < REALLIT: (["0"-"9"])+ "." (["0"-"9"])+ (<EXPONENT>)? >
|
    < #EXPONENT: ["e","E"] (["+","-"])? (["0"-"9"])+ >
|
    < CHARLIT:
        "'"
        (
            ~["'", "\\" ,"\u0000"-"\u001f", "\u007f"-"\u009f"]
        |
            "\\" ( ["n", "t", "\\", "'", "\""] | <UNICODE_SPEC> )
        )
        "'"
    >
|
    < STRINGLIT:
        "\""
        (
            ~["\"", "\\" ,"\u0000"-"\u001f", "\u007f"-"\u009f"]
        |
            "\\" ( ["n", "t", "\\", "'", "\""] | <UNICODE_SPEC> )
        )*
        "\""
    >
|
    < #UNICODE_SPEC:
        (<HEX>)(<HEX>)?(<HEX>)?(<HEX>)?(<HEX>)?(<HEX>)?(<HEX>)?(<HEX>)? ";"
    >
|
    < #HEX: ["0"-"9", "A"-"F", "a"-"f"] >
|
    < ID: <LETTER> (<LETTER>|<DIGIT>|"_")* >
|
    < #LETTER: [
        "\u0041"-"\u005a", "\u0061"-"\u007a", "\u00c0"-"\u00d6",
        "\u00d8"-"\u00f6", "\u00f8"-"\u00ff", "\u0100"-"\u1fff",
        "\u3040"-"\u318f", "\u3300"-"\u337f", "\u3400"-"\u3d2d",
        "\u4e00"-"\u9fff", "\uf900"-"\ufaff"
    ] >
|
    < #DIGIT: [
        "\u0030"-"\u0039", "\u0660"-"\u0669", "\u06f0"-"\u06f9",
        "\u0966"-"\u096f", "\u09e6"-"\u09ef", "\u0a66"-"\u0a6f",
        "\u0ae6"-"\u0aef", "\u0b66"-"\u0b6f", "\u0be7"-"\u0bef",
        "\u0c66"-"\u0c6f", "\u0ce6"-"\u0cef", "\u0d66"-"\u0d6f",
        "\u0e50"-"\u0e59", "\u0ed0"-"\u0ed9", "\u1040"-"\u1049"
    ] >
}

// ---------------------------------------------------------------------------
// SYNTAX ANALYZER
// ---------------------------------------------------------------------------

Program parseProgram(): {
    List<Statement> statements = new ArrayList<Statement>();
    Statement s;
}{
    ( s = parseStmt() {statements.add(s);} )+
    <EOF>
    {   
        //System.out.println("parseProgram");
        return new Program(statements);
    }
}

Declarable parseDec(): {
    Declarable d;
}{
    (
        LOOKAHEAD("struct" | "enum")
        d = parseTypeDec()
    |
        LOOKAHEAD(parseFunDec())
        d = parseFunDec()
    |
        d = parseVarDec()
    )
    {   //System.out.println("parseDec");
        return d;
    }
}

Type parseTypeDec(): {
    Token s;
    Token e;
    String t;
    Token f;
    List<StructField> structFields = new ArrayList<StructField>();
    List<EnumField> enumFields = new ArrayList<EnumField>();
}{  
    (
        "struct" s = <ID>
        "{"
        (
            t = parseType() f = <ID> ";"
            {structFields.add(new StructField(f.image, t));}
        )*
        "}"
        {   
            //System.out.println("parseTypeDec::StructType");
            return new StructType(s.image, structFields);
        }        
    |
        "enum" e = <ID>
        "{" f = <ID>
        {enumFields.add(new EnumField(f.image, enumFields.size()));}
        (
            "," f = <ID>
            {enumFields.add(new EnumField(f.image, enumFields.size()));}
        )*
        "}"
        {   
            //System.out.println("parseTypeDec::EnumType");
            return new EnumType(e.image, enumFields);
        }  
    )
}

String parseType(): {
    Token i;
    StringBuilder builder = new StringBuilder();
}{
    (
        i = "boolean"
    |
        i = "char"
    |
        i = "int"
    |
        i = "real"
    |
        i = "string"
    |
        i = "stream"    
    |
        i = "thread"
    |
        i = <ID>
    )
    {builder.append(i.image);}
    (
        LOOKAHEAD(2) "[" "]" {builder.append("[]");}
    )*
    {   
        //System.out.println("parseType");
        return builder.toString();
    }
}

Variable parseVarDec(): {
    String t;
    Token v;
    Token c;
    Token vol = null;
    Expression e = null;
}{
    (
        (vol = "volatile")? t = parseType() v = <ID> ("=" e = parseExp())? ";"
        {
            if (vol == null) {
                //System.out.println("parseVarDec::nonVolatile");
                return new Variable(v.image, t, e);
            } else {
                //System.out.println("parseVarDec::Volatile");
                return new Variable(v.image, t, e, vol.image); // maybe not pass in the image of the vol?
            }
        }
    |
        c = "const" t = parseType() v = <ID> "=" e = parseExp() ";"
        {   
            //System.out.println("parseVarDec::const");
            return new Variable(v.image, t, e, c.image);
         }
    )
}

Function parseFunDec(): {
    String r;
    Token n;
    String t;
    Token p;
    List<Variable> params = new ArrayList<Variable>();
    Block body;
}{
    (r = parseType() | "void" 
        {
            r = "void";
            //System.out.println("parsing Fun Dec for void");
        }
    )
    n = <ID>
    "("
    (
        t = parseType() p = <ID>
        {params.add(new Variable(p.image, t, null));}
        (
            "," t = parseType() p = <ID>
            {params.add(new Variable(p.image, t, null));}
        )*
    )?
    ")"
    body = parseBlock()
    {   
        //System.out.println("parseFunDec()");
        return new Function(r, n.image, params, body);
    }
}

Block parseBlock(): {
    List<Statement> statements = new ArrayList<Statement>();
    Statement s;
}{
    "{"
    ( s = parseStmt() {statements.add(s);} )*
    "}"
    {   
        //System.out.println("parseBlock");
        return new Block(statements);
    }
}

Statement parseStmt(): {
    Declarable d;
    Expression e = null, e1 = null, e2 = null;
    Statement s = null;
    Block b = null;
    Block elseBlock = null;
    Token i = null;
    String t = null;
    List<Expression> args = new ArrayList<Expression>();
    List<Case> cases = new ArrayList<Case>();
}{
    LOOKAHEAD(3)
    d = parseDec()
    {
        //System.out.println("parseStmt::Declaration");
        return new Declaration(d);
    }
|
    s = parseSimpleStatement() 
    (
        (
            i = "if"
        | 
            i = "unless"
        |  
            i = "while"
        | 
            i = "until"
        )
        e  = parseExp()
    )? ";"
    {
        if (e == null) {
            //System.out.println("parseStmt::SimpleStatement");
            return s;
        } else {
            //System.out.println("parseStmt::ConditionalSimpleStatement");
            return new ConditionalSimpleStatement(s, e, i.image);
        }
    }
|
    LOOKAHEAD(2) "for" "("
    (t =  parseType() i = <ID> "=" e1 = parseExp())? ";"
    (e2 = parseExp())? ";"
    (s = parseAssignment())?
    ")"
    b = parseBlock()
    {
        //System.out.println("parseStmt::ClassicForStatement");
        return new ClassicForStatement(t, i == null ? null: i.image, e1, e2, s, b);
    }
|
    LOOKAHEAD(2) "for" i = <ID> 
    "(" e = parseExp() ")" b = parseBlock()
    {
        //System.out.println("parseStmt::NotClassicForStatement");
        return new NotClassicForStatement(i.image, e, b);
    }
|
    "if" "(" e = parseExp() ")" b = parseBlock()
    {cases.add(new Case(e, b));}
    (
        LOOKAHEAD(2) "else" "if" "(" e = parseExp() ")" b = parseBlock()
        {cases.add(new Case(e, b));}
    )*
    (
        "else" elseBlock = parseBlock()
    )?
    {
        //System.out.println("parseStmt::IfStatement");
        return new IfStatement(cases, elseBlock);
    }
|
    "while" "(" e = parseExp() ")" b = parseBlock()
    {
        //System.out.println("parseStmt::WhileStatement");
        return new WhileStatement(e, b);
    }
}

Statement parseSimpleStatement(): {
    Expression e = null;
    Statement a;
}{
    "break"
    {
        //System.out.println("parseSimpleStatement::BreakStatement");
        return new BreakStatement();
    }
|
    "continue"
    {
        //System.out.println("parseSimpleStatement::ContinueStatement");
        return new ContinueStatement();
    }
|
    "return" (e = parseExp())?
    {
        //System.out.println("parseSimpleStatement::ReturnStatement");
        return new ReturnStatement(e);
    }
|
    "die" e = parseExp()
    {
        //System.out.println("parseSimpleStatement::DieStatement");
        return new DieStatement(e);
    }
|
    LOOKAHEAD(parseAssignment())
    a = parseAssignment()
    {
        //System.out.println("parseSimpleStatement::parseAssignment");
        return a;
    }
|
    LOOKAHEAD(parseCallStatement())
    a = parseCallStatement()
    {
        //System.out.println("parseSimpleStatement::CallStatement");
        return a;
    }    
}

Statement parseAssignment(): {
    VariableExpression v;
    Expression e = null;
    Statement s;
}{
    LOOKAHEAD(parseIncop() | parseVar() parseIncop())
    s = parseIncrementStatement()
    {
        //System.out.println("parseAssignment::IncrementStatement");
        return s;
    }
|
    v = parseVar() "=" e = parseExp()
    {
        //System.out.println("parseAssignment::AssignmentStatement");
        return new AssignmentStatement(v, e);
    }
}

Statement parseIncrementStatement(): {
    String op;
    VariableExpression v;
}{
    (
        op=parseIncop() v = parseVar()
    |
        v = parseVar() op = parseIncop()
    )
    {
        //System.out.println("parseIncrementStatement::IncrementStatement");
        return new IncrementStatement(v, op);
    }
}

Statement parseCallStatement(): {
    Token i;
    List<Expression> args;
}{
    (
        i = <ID> "(" args = parseArgs() ")"
        {
            //System.out.println("parseCallStatement");
            return new CallStatement(i.image, args);
        }
    |
        "print" "(" args = parseArgs() ")"
        {
            //System.out.println("parsePrintStatement");
            return new PrintStatement(args);
        }    
    )

}

Expression parseExp(): {
    Expression e1;
    Expression e2;
    Expression e3;
}{
    e1 = parseExp0()
    (
        "?" e2 = parseExp0() ":" e3 = parseExp0()
        {
            //System.out.println("parseExp::TernaryExpression");
            return new TernaryExpression(e1, e2, e3);
        }
    )*
    {
        //System.out.println("parseExp::notTernarnaryExpression");
        return e1;
    }
}

Expression parseExp0(): {
    Expression e1;
    Expression e2;
}{
    e1 = parseExp1()
    ("||" e2 = parseExp1() {e1 = new InfixExpression(e1, "||", e2);})*
    {
        //System.out.println("parseExp0()::InfixExpressions::||");
        return e1;
    }    
}


Expression parseExp1(): {
    Expression e1;
    Expression e2;
}{
    e1 = parseExp2()
    ("&&" e2 = parseExp2() {e1 = new InfixExpression(e1, "&&", e2);})*
    {
        //System.out.println("parseExp1()::InfixExpression::&&");
        return e1;
    }
}

Expression parseExp2(): {
    Expression e1;
    Expression e2;
}{
    e1 = parseExp3()
    ("|" e2 = parseExp3() {e1 = new InfixExpression(e1, "|", e2);})*
    {
        //System.out.println("parseExp2::InfixExpression::|");
        return e1;
    }
}

Expression parseExp3(): {
    Expression e1;
    Expression e2;
}{
    e1 = parseExp4()
    ("^" e2 = parseExp4() {e1 = new InfixExpression(e1, "^", e2);})*
    {
        //System.out.println("parseExp3()::InfixExpression::^");
        return e1;
    }
}

Expression parseExp4(): {
    Expression e1;
    Expression e2;
}{
    e1 = parseExp5()
    ("&" e2 = parseExp5() {e1 = new InfixExpression(e1, "&", e2);})*
    {
        //System.out.println("parseExp4()::InfixExpression::&");
        return e1;
    }
}

Expression parseExp5(): {
    String op;
    Expression e1;
    Expression e2;
}{
    e1 = parseExp6()
    (op = parseRelop() e2 = parseExp6() {e1 = new InfixExpression(e1, op, e2);})?
    {
        //System.out.println("parseExp5()::InfixExpression::Relop");
        return e1;
    }
}

Expression parseExp6(): {
    String op;
    Expression e1;
    Expression e2;
}{
    e1 = parseExp7()
    (op = parseShiftop() e2 = parseExp7() {e1 = new InfixExpression(e1, op, e2);})*
    {
        //System.out.println("parseExp6()::InfixExpression::shiftOp");
        return e1;
    }
}

Expression parseExp7(): {
    String op;
    Expression e1;
    Expression e2;
}{
    e1 = parseExp8()
    (op = parseAddop() e2 = parseExp8() {e1 = new InfixExpression(e1, op, e2);})*
    {
        //System.out.println("parseExp7()::InfixExpression::Addop");
        return e1;
    }
}

Expression parseExp8(): {
    String op;
    Expression e1;
    Expression e2;
}{
    e1 = parseExp9()
    (op = parseMulop() e2 = parseExp9() {e1 = new InfixExpression(e1, op, e2);})*
    {
        //System.out.println("parseExp8()::InfixExpression::Mulop");
        return e1;
    }
}

Expression parseExp9(): {
    String op = null;
    Expression e = null;
}{
    (op = parsePrefixop())? e = parseExp10()
    {
        //System.out.println("parseExp9::PrefixExpression");
        return op == null ? e : new PrefixExpression(op, e);
    }
}

Expression parseExp10(): {
    Expression e = null;
}{
    LOOKAHEAD(2) e = parseLiteral()
    {
        //System.out.println("parseExp10::parseLiteral");
        return e;
    }
|
    LOOKAHEAD(e = parseIncrementExpression()) e = parseIncrementExpression()
    {
        //System.out.println("parseExp10::parseIncrementExpression");
        return e;
    }
|
    e = parseVar()
    {
        //System.out.println("parseExp10::parseVar");
        return e;
    }
|
    e = parseNewObject()
    {
        //System.out.println("parseExp10::parseNewObject");
        return e;
    }
|
    "(" e = parseExp() ")"
    {
        //System.out.println("parseExp10::(parseExp)");
        return e;
    }
}

Literal parseLiteral(): {
    Token i;
    Token j;
}{
    "null"
    {
        //System.out.println("parseLiteral::null");
        return Literal.NULL;
    }
|
    "true" 
    {
        //System.out.println("parseLiteral::true");
        return BooleanLiteral.TRUE;
    }
|
    "false"
    {
        //System.out.println("parseLiteral::false");
        return BooleanLiteral.FALSE;
    }
|
    i=<INTLIT>
    {
        //System.out.println("parseLiteral::INTLIT");
        return new IntegerLiteral(i.image);
    }
|
    i=<REALLIT> 
    {
        //System.out.println("parseLiteral::REALLIT");
        return new RealLiteral(i.image);
    }
|
    i=<CHARLIT> 
    {
        //System.out.println("parseLiteral::CHARLIT");    
        return new CharLiteral(i.image);
    }
|
    i=<STRINGLIT>
    {
        //System.out.println("parseLiteral::STRINGLIT");
        return new StringLiteral(i.image);
    }
|
    i=<ID> "::" j=<ID> 
    {
        //System.out.println("parseLiteral::enumLiteral");
        return new EnumerationLiteral(i.image, j.image);
    }
}

VariableExpression parseVar(): {
    VariableExpression v;
    Expression e =  null;
    Expression e0 = null;
    Token i;
}{
    (
        LOOKAHEAD(2) v = parseCallExpression()
    |
        i = <ID>
        {
            v = new SimpleVariableReference(i.image);
            //System.out.println("parseVar()::SimpleVariableReference");
        }
    )
    (
        "[" e = parseExp() ("..." e0 = parseExp())? "]"
        {
            v = new SubscriptedVariable(v, e);
            //System.out.println("parseVar()::SubscriptedVariable");
        }
    |
        "." i = <ID>
        {
            v = new DottedVariable(v, i.image);
            //System.out.println("parseVar()::DottedVariable");
        }
    )* 
    {return v;}
}

Expression parseIncrementExpression(): {
    String op;
    VariableExpression v;
}{
    op = parseIncop() v = parseVar()
    {
        //System.out.println("parseIncrementExpression::PrefixExpression");
        return new PrefixExpression(op, v);
    }
|
    v = parseVar() op = parseIncop()
    {
        //System.out.println("parseIncrementExpression::PostfixExpression");
        return new PostfixExpression(v, op);
    }
}

Expression parseNewObject(): {
    String t;
    List<Expression> args;
    Expression e;
    Token i;
    List<Expression> bounds = new ArrayList<Expression>();
}{
    "new"
    (
        LOOKAHEAD(<ID> "{") i = <ID> "{" args = parseArgs() "}"
        {
            //System.out.println("parseNewObject::StructAggregate");
            return new StructAggregate(i.image, args);
        }
    |
        t = parseType()
        (
            "{" args = parseArgs() "}"
            {
                //System.out.println("parseNewObject::ArrayAggregate");
                return new ArrayAggregate(t, args);
            }
        | 
            ("[" e = parseExp() "]" {bounds.add(e);})+
            {
                //System.out.println("parseNewObject::EmptyArray");
                return new EmptyArray(t, bounds);
            }
        )
    )
}

VariableExpression parseCallExpression(): {
    Token i;
    List<Expression> args;
}{
    i = <ID> "(" args = parseArgs() ")"
    {
        //System.out.println("parseCallExpression");
        return new CallExpression(i.image, args);
    }
}

List<Expression> parseArgs(): {
    List<Expression> args = new ArrayList<Expression>();
    Expression e;
}{
    (
        e = parseExp() {args.add(e);}
        ("," e = parseExp() {args.add(e);})*
    )?
    {
        //System.out.println("parseArgs");
        return args;
    }
}

String parseRelop(): {
    Token i;
}{
    (i = "<" | i = "<=" | i = "==" | i = "!=" | i = ">=" | i = ">")
    {
        //System.out.println("parseRelop()");
        return i.image;
    }
}

String parseShiftop(): {
    Token i;
}{
    (i = "<<" | i = ">>")
    {
        //System.out.println("parseShiftop()");
        return i.image;
    }
}

String parseAddop(): {
    Token i;
}{
    (i = "+" | i = "-")
    {
        //System.out.println("parseAddop()");
        return i.image;
    }
}

String parseMulop(): {
    Token i;
}{
    (i = "*" | i = "/" | i = "%")
    {
        //System.out.println("parseMulop()");
        return i.image;
    }
}

String parsePrefixop(): {
    Token i;
}{
    (i = "-" | i = "!" | i = "~" | i = "#" | i = "$")
    {
        //System.out.println("parsePrefixop");
        return i.image;
    }
}

String parseIncop(): {
    Token i;
}{
    (i = "++" | i = "--")
    {
        //System.out.println("parseIncop");
        return i.image;
    }
}
